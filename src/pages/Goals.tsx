import { useState } from "react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Plus,
  Target,
  TrendingUp,
  DollarSign,
  PiggyBank,
  CheckCircle2,
  Edit,
  Trash2,
} from "lucide-react";
import { useGoals, Goal } from "@/hooks/use-goals";
import { useDashboardData } from "@/hooks/use-dashboard-data";

const Goals = () => {
  const { goals, loading, error, createGoal, updateGoal, deleteGoal } =
    useGoals();
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingGoal, setEditingGoal] = useState<Goal | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    target_amount: "",
    target_type: "quantity",
    deadline: "",
    category: "",
    repeat_yearly: false,
  });

  const goalCategories = [
    { value: "total_income", label: "Ingresos Totales" },
    { value: "annual_savings", label: "Ahorros Anuales" },
    { value: "end_year_patrimony", label: "Patrimonio" },
    { value: "savings_ratio", label: "Ratio de Ahorro" },
  ];

  const getDefaultDeadline = () => {
    const now = new Date();
    const year = now.getFullYear();
    return `${year}-12-31`;
  };

  const openDialog = (goal?: Goal) => {
    if (goal) {
      setEditingGoal(goal);
      setFormData({
        name: goal.name || "",
        target_amount: goal.target_amount.toString(),
        target_type: goal.target_type || "quantity",
        deadline: goal.deadline || getDefaultDeadline(),
        category: goal.category || "",
        repeat_yearly: Boolean(
          (goal as unknown as { repeat_yearly?: boolean }).repeat_yearly ??
            false
        ),
      });
    } else {
      setEditingGoal(null);
      setFormData({
        name: "",
        target_amount: "",
        target_type: "quantity",
        deadline: getDefaultDeadline(),
        category: "",
        repeat_yearly: false,
      });
    }
    setIsDialogOpen(true);
  };

  const closeDialog = () => {
    setIsDialogOpen(false);
    setEditingGoal(null);
    setFormData({
      name: "",
      target_amount: "",
      target_type: "quantity",
      deadline: getDefaultDeadline(),
      category: "",
      repeat_yearly: false,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const autogeneratedName = generateGoalName(
      formData.category,
      formData.target_type,
      Number(formData.target_amount)
    );
    const goalData = {
      // If name is empty, auto-generate a readable name
      name: (formData.name || autogeneratedName).trim(),
      target_amount: parseFloat(formData.target_amount),
      target_type: formData.target_type,
      deadline: formData.deadline || null,
      category: formData.category,
      year: formData.repeat_yearly ? null : new Date().getFullYear(),
      repeat_yearly: formData.repeat_yearly,
    };

    if (editingGoal) {
      await updateGoal(editingGoal.id, goalData);
    } else {
      await createGoal(goalData);
    }
    closeDialog();
  };

  const handleDelete = async (id: string) => {
    if (
      window.confirm("¿Estás seguro de que quieres eliminar este objetivo?")
    ) {
      await deleteGoal(id);
    }
  };

  const getGoalIcon = (category: string | null | undefined) => {
    switch (category) {
      case "total_income":
        return TrendingUp;
      case "annual_savings":
        return PiggyBank;
      case "end_year_patrimony":
        return DollarSign;
      case "savings_ratio":
        return Target;
      default:
        return Target;
    }
  };

  const getGoalColor = (category: string | null | undefined) => {
    switch (category) {
      case "total_income":
        return "success";
      case "annual_savings":
        return "info";
      case "end_year_patrimony":
        return "primary";
      case "savings_ratio":
        return "warning";
      default:
        return "info";
    }
  };

  const getProgressPercentage = (current: number | null, target: number) => {
    if (current === null) return 0;
    return Math.min((current / target) * 100, 100);
  };

  const getStatusColor = (percentage: number) => {
    if (percentage >= 100) return "text-success";
    if (percentage >= 75) return "text-primary";
    if (percentage >= 50) return "text-info";
    return "text-warning";
  };

  const getStatusIcon = (percentage: number) => {
    return percentage >= 100 ? CheckCircle2 : Target;
  };

  const getColorClass = (color: string) => {
    switch (color) {
      case "success":
        return "text-success";
      case "info":
        return "text-info";
      case "primary":
        return "text-primary";
      case "warning":
        return "text-warning";
      default:
        return "text-foreground";
    }
  };

  const getBgColorClass = (color: string) => {
    switch (color) {
      case "success":
        return "from-success to-success/80";
      case "info":
        return "from-info to-info/80";
      case "primary":
        return "from-primary to-primary/80";
      case "warning":
        return "from-warning to-warning/80";
      default:
        return "from-muted to-muted/80";
    }
  };

  // Dashboard aggregates to compute goal progress
  const { totalIngresos, totalAhorro, currentPatrimony } = useDashboardData();

  const computeCurrentForGoal = (goal: Goal) => {
    if (!goal?.category) return 0;
    switch (goal.category) {
      case "total_income":
        return totalIngresos;
      case "annual_savings":
        return totalAhorro;
      case "end_year_patrimony":
        return currentPatrimony;
      case "savings_ratio": {
        const ratio =
          totalIngresos > 0 ? (totalAhorro / totalIngresos) * 100 : 0;
        return ratio;
      }
      default:
        return 0;
    }
  };

  const formatValue = (goal: Goal, value: number) => {
    if (
      goal.category === "savings_ratio" ||
      goal.target_type === "percentage"
    ) {
      return `${value.toFixed(0)}%`;
    }
    return `€${Math.round(value).toLocaleString()}`;
  };

  const generateGoalName = (
    category?: string | null,
    targetType?: string | null,
    targetAmount?: number
  ) => {
    const labelByCategory: Record<string, string> = {
      total_income: "Ingresos Totales",
      annual_savings: "Ahorros Anuales",
      end_year_patrimony: "Patrimonio a Fin de Año",
      savings_ratio: "Ratio de Ahorro",
    };
    const base = category
      ? labelByCategory[category] || "Objetivo"
      : "Objetivo";
    if (typeof targetAmount === "number" && !Number.isNaN(targetAmount)) {
      if (category === "savings_ratio" || targetType === "percentage") {
        return `${base} ${targetAmount}%`;
      }
      return `${base} €${Math.round(targetAmount).toLocaleString()}`;
    }
    return base;
  };

  const monthsLeftForGoal = (goal: Goal) => {
    const now = new Date();
    const end = goal.deadline
      ? new Date(goal.deadline)
      : new Date(now.getFullYear(), 11, 31);
    // Calculate months difference, minimum 1
    const years = end.getFullYear() - now.getFullYear();
    const months = years * 12 + (end.getMonth() - now.getMonth());
    return Math.max(1, months);
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold text-foreground">
            Objetivos Financieros
          </h1>
          <p className="text-muted-foreground">
            Define y sigue el progreso de tus metas financieras
          </p>
        </div>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button
              className="w-full bg-primary hover:bg-primary/90 sm:w-auto"
              onClick={() => openDialog()}
            >
              <Plus className="h-4 w-4 mr-2" />
              Nuevo Objetivo
            </Button>
          </DialogTrigger>
          <DialogContent className="w-full max-w-[min(100vw-2rem,640px)] max-h-[85vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>
                {editingGoal ? "Editar Objetivo" : "Nuevo Objetivo"}
              </DialogTitle>
            </DialogHeader>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="name">Nombre del Objetivo (opcional)</Label>
                <Input
                  id="name"
                  placeholder={generateGoalName(
                    formData.category,
                    formData.target_type,
                    Number(formData.target_amount)
                  )}
                  value={formData.name}
                  onChange={(e) =>
                    setFormData({ ...formData, name: e.target.value })
                  }
                />
                <p className="mt-1 text-xs text-muted-foreground">
                  Si lo dejas vacío, se autogenerará.
                </p>
              </div>
              <div>
                <Label htmlFor="category">Categoría</Label>
                <Select
                  value={formData.category}
                  onValueChange={(value) =>
                    setFormData({ ...formData, category: value })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona una categoría" />
                  </SelectTrigger>
                  <SelectContent>
                    {goalCategories.map((cat) => (
                      <SelectItem key={cat.value} value={cat.value}>
                        {cat.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="target_type">Tipo de Objetivo</Label>
                <Select
                  value={formData.target_type}
                  onValueChange={(value) =>
                    setFormData({ ...formData, target_type: value })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona el tipo" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="quantity">Cantidad Fija</SelectItem>
                    <SelectItem value="percentage">Porcentaje</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="target_amount">
                  {formData.target_type === "quantity"
                    ? "Cantidad Objetivo (€)"
                    : "Porcentaje Objetivo (%)"}
                </Label>
                <Input
                  id="target_amount"
                  type="number"
                  value={formData.target_amount}
                  onChange={(e) =>
                    setFormData({ ...formData, target_amount: e.target.value })
                  }
                  required
                />
              </div>
              <div>
                <Label htmlFor="deadline">Fecha Límite (opcional)</Label>
                <Input
                  id="deadline"
                  type="date"
                  value={formData.deadline}
                  onChange={(e) =>
                    setFormData({ ...formData, deadline: e.target.value })
                  }
                />
              </div>
              <div className="flex flex-wrap items-center gap-2">
                <input
                  id="repeat_yearly"
                  type="checkbox"
                  checked={formData.repeat_yearly}
                  onChange={(e) =>
                    setFormData({
                      ...formData,
                      repeat_yearly: e.target.checked,
                    })
                  }
                />
                <Label htmlFor="repeat_yearly">Repetir cada año</Label>
              </div>
              <div className="flex flex-col-reverse gap-2 sm:flex-row sm:justify-end">
                <Button
                  type="button"
                  variant="outline"
                  onClick={closeDialog}
                >
                  Cancelar
                </Button>
                <Button type="submit">
                  {editingGoal ? "Actualizar" : "Crear"}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      {loading && <p>Cargando objetivos...</p>}
      {error && <p className="text-red-500">Error: {error}</p>}

      {/* Goals Overview */}
      {goals.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {goals.map((goal) => {
            const current = computeCurrentForGoal(goal);
            const percentage = getProgressPercentage(
              current,
              goal.target_amount
            );
            const IconComponent = getGoalIcon(goal.category);
            const StatusIcon = getStatusIcon(percentage);
            const color = getGoalColor(goal.category);

            return (
              <Card key={goal.id} className="shadow-card">
                <CardContent className="p-4">
                  <div className="mb-3 flex flex-wrap items-center justify-between gap-2">
                    <IconComponent
                      className={`h-6 w-6 ${getColorClass(color)}`}
                    />
                    <StatusIcon
                      className={`h-5 w-5 ${getStatusColor(percentage)}`}
                    />
                  </div>
                  <div className="space-y-2">
                    <h3 className="font-semibold text-sm text-foreground">
                      {goal.name}
                    </h3>
                    <div className="text-2xl font-bold text-foreground">
                      {percentage.toFixed(0)}%
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div
                        className={`bg-gradient-to-r ${getBgColorClass(
                          color
                        )} h-2 rounded-full transition-all duration-300`}
                        style={{ width: `${percentage}%` }}
                      ></div>
                    </div>
                    <div className="flex flex-wrap items-center justify-between gap-2 text-xs text-muted-foreground">
                      <span>{formatValue(goal, current)}</span>
                      <span>
                        {goal.category === "savings_ratio" ||
                        goal.target_type === "percentage"
                          ? `${goal.target_amount.toLocaleString()}%`
                          : `€${goal.target_amount.toLocaleString()}`}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      ) : (
        <div className="text-center py-10">
          <h2 className="text-2xl font-bold text-foreground mb-4">
            No tienes objetivos aún
          </h2>
          <p className="text-muted-foreground mb-6">
            ¡Crea tu primer objetivo financiero para empezar a seguir tu
            progreso!
          </p>
          <Button
            onClick={() => openDialog()}
            className="w-full bg-primary hover:bg-primary/90 sm:w-auto"
          >
            <Plus className="h-4 w-4 mr-2" />
            Crear Primer Objetivo
          </Button>
        </div>
      )}

      {goals.length > 0 && (
        <div className="space-y-6">
          <Card className="shadow-card">
            <CardHeader>
              <CardTitle>
                Detalle de Objetivos {new Date().getFullYear()}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b border-border">
                      <th className="text-left p-3 font-semibold text-foreground">
                        Objetivo
                      </th>
                      <th className="text-center p-3 font-semibold text-foreground">
                        Meta
                      </th>
                      <th className="text-center p-3 font-semibold text-foreground">
                        Actual
                      </th>
                      <th className="text-center p-3 font-semibold text-foreground">
                        Progreso
                      </th>
                      <th className="text-center p-3 font-semibold text-foreground">
                        Restante
                      </th>
                      <th className="text-center p-3 font-semibold text-foreground">
                        Estado
                      </th>
                      <th className="text-center p-3">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    {goals.map((goal) => {
                      const current = computeCurrentForGoal(goal);
                      const percentage = getProgressPercentage(
                        current,
                        goal.target_amount
                      );
                      const remaining = goal.target_amount - current;
                      const IconComponent = getGoalIcon(goal.category);
                      const color = getGoalColor(goal.category);

                      return (
                        <tr
                          key={goal.id}
                          className="border-b border-border/50 hover:bg-muted/30"
                        >
                          <td className="p-3">
                            <div className="flex flex-wrap items-center gap-3">
                              <IconComponent
                                className={`h-5 w-5 ${getColorClass(color)}`}
                              />
                              <div>
                                <div className="font-medium text-foreground">
                                  {goal.name}
                                </div>
                              </div>
                            </div>
                          </td>
                          <td className="p-3 text-center font-semibold text-foreground">
                            {goal.category === "savings_ratio" ||
                            goal.target_type === "percentage"
                              ? `${goal.target_amount.toLocaleString()}%`
                              : `€${goal.target_amount.toLocaleString()}`}
                          </td>
                          <td className="p-3 text-center font-medium text-foreground">
                            {formatValue(goal, current)}
                          </td>
                          <td className="p-3 text-center">
                            <div className="flex flex-wrap items-center justify-center gap-2">
                              <div className="flex-1 bg-muted rounded-full h-2">
                                <div
                                  className={`bg-gradient-to-r ${getBgColorClass(
                                    color
                                  )} h-2 rounded-full transition-all duration-300`}
                                  style={{ width: `${percentage}%` }}
                                ></div>
                              </div>
                              <span
                                className={`text-sm font-medium ${getStatusColor(
                                  percentage
                                )}`}
                              >
                                {percentage.toFixed(0)}%
                              </span>
                            </div>
                          </td>
                          <td className="p-3 text-center font-medium">
                            <span
                              className={
                                remaining > 0 ? "text-warning" : "text-success"
                              }
                            >
                              {goal.category === "savings_ratio" ||
                              goal.target_type === "percentage"
                                ? `${Math.abs(remaining).toFixed(0)}%`
                                : `€${Math.abs(
                                    Math.round(remaining)
                                  ).toLocaleString()}`}
                            </span>
                          </td>
                          <td className="p-3 text-center">
                            <span
                              className={`px-2 py-1 text-xs rounded-full font-medium ${
                                percentage >= 100
                                  ? "bg-success/20 text-success"
                                  : percentage >= 75
                                  ? "bg-primary/20 text-primary"
                                  : percentage >= 50
                                  ? "bg-info/20 text-info"
                                  : "bg-warning/20 text-warning"
                              }`}
                            >
                              {percentage >= 100
                                ? "Completado"
                                : percentage >= 75
                                ? "Casi logrado"
                                : percentage >= 50
                                ? "En progreso"
                                : "Iniciando"}
                            </span>
                          </td>
                          <td className="p-3 text-center">
                            <div className="flex flex-wrap justify-center gap-2">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => openDialog(goal)}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleDelete(goal.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>

          <Card className="shadow-card">
            <CardHeader>
              <CardTitle>Proyección Mensual</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-foreground">
                    Para cumplir objetivos restantes necesitas:
                  </h3>
                  <div className="space-y-3">
                    {goals.map((goal) => {
                      const current = computeCurrentForGoal(goal);
                      const remaining = goal.target_amount - current;
                      const monthsLeft = monthsLeftForGoal(goal);
                      const monthlyNeeded = remaining / monthsLeft;

                      return (
                        <div
                          key={goal.id}
                          className="flex flex-wrap items-center justify-between gap-2 rounded bg-muted/30 p-3"
                        >
                          <span className="text-sm text-foreground">
                            {goal.name ||
                              generateGoalName(
                                goal.category,
                                goal.target_type,
                                goal.target_amount
                              )}
                          </span>
                          {goal.category === "savings_ratio" ||
                          goal.target_type === "percentage" ? (
                            <span className="font-medium text-warning">
                              {monthlyNeeded.toFixed(1)}%/mes
                            </span>
                          ) : (
                            <span className="font-medium text-warning">
                              €
                              {Math.max(0, Math.round(monthlyNeeded))
                                .toString()
                                .replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                              /mes
                            </span>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
                <div className="space-y-4">
                  <h3 className="font-semibold text-foreground">
                    Resumen de Progreso
                  </h3>
                  <div className="space-y-3">
                    <div className="flex flex-wrap items-center justify-between gap-2">
                      <span className="text-sm text-muted-foreground">
                        Objetivos completados
                      </span>
                      <span className="font-medium text-success">
                        {
                          goals.filter(
                            (goal) =>
                              getProgressPercentage(
                                computeCurrentForGoal(goal),
                                goal.target_amount
                              ) >= 100
                          ).length
                        }{" "}
                        / {goals.length}
                      </span>
                    </div>
                    <div className="flex flex-wrap items-center justify-between gap-2">
                      <span className="text-sm text-muted-foreground">
                        Progreso promedio
                      </span>
                      <span className="font-medium text-info">
                        {goals.length > 0
                          ? (
                              goals.reduce(
                                (sum, goal) =>
                                  sum +
                                  getProgressPercentage(
                                    computeCurrentForGoal(goal),
                                    goal.target_amount
                                  ),
                                0
                              ) / goals.length
                            ).toFixed(1)
                          : 0}
                        %
                      </span>
                    </div>
                    <div className="flex flex-wrap items-center justify-between gap-2">
                      <span className="text-sm text-muted-foreground">
                        Objetivos en riesgo
                      </span>
                      <span className="font-medium text-warning">
                        {
                          goals.filter(
                            (goal) =>
                              getProgressPercentage(
                                computeCurrentForGoal(goal),
                                goal.target_amount
                              ) < 50
                          ).length
                        }
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default Goals;
